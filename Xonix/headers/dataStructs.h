//Данные игрока
struct Player {
	int x; //Координата по x в пикселях
	int y; //Координата по y в пикселях
	int posMatrixX; //Координата по x в матрице FieldGame.matrix
	int posMatrixY; //Координата по y в матрице FieldGame.matrix
	int w; //Ширина игрока в пикселях
	int h; //Высота игрока в пикселях
	int speed; //Скорость игрока в пикселях
	int lives; //Количество жизней игрока
	int direction; //Направление игрока 
	int r, g, b; //Цвет игрока
};
//Данные для одного бонуса 
struct Bonus {
	int x; //Координата по x в пикселях
	int y; //Координата по y в пикселях
	int w; //Ширина в пикселях
	int h; //Высота в пикселях
	int typeBonus; //Тип бонуса
		//Бонусная система
	//0,1 - бафф/дебафф на очки (в пределах 100 - 5000)
	//2,3 - бафф/дебафф на жизни (+-1)
	//4,5 - бафф/дебафф на время (+-15с)
};
//Данные о бонусной системе
struct Bonuses {
	Bonus* listBonuses; //Массив длины length из чисел, обозначающих бонус (ограничение для ограниченности бонусов на поле собственно)
	int length; //Длина массива
	int top; //Последний существующий бонус
	int interval; //Интервал появления бонусов (в миллисекундах)
	int time; //Текущее время до интервала (в миллисекундах)
};
//Данные о рекордах
struct Records {
	int* masRecords; //Массив значений рекордов по уровням
	int top; //Последний по порядку в файле рекорд
	int length;  //Длина массива
};
//Данные поля с состояниях
struct FieldState {
	int x; //Координата по x
	int y; //Координата по y
	int w; //Ширина поля
	int h; //Высота поля
	int r, g, b; //Цвет поля
	int score; //Набранные очки
};
//Данные поля-границы игрового поля
struct FieldWrap {
	int x; //Координата по x
	int y; //Координата по y
	int w; //Ширина поля в пикселях
	int h; //Высота поля в пикселях
	int widthCell; //
	int r, g, b; //Цвет поля
};
//Данные игрового поля
struct FieldGame {
	int x; //Координата по x в пикселях
	int y; //Координата по y в пикселях
	int w; //Ширина поля в пикселях
	int h; //Высота поля в пикселях
	int widthCell; //Ширина поля в ячейках
	int heightCell; //Высота поля в ячейках
	int score; //Набранные очки
	int* matrix; //Указатель на матрицу игрового поля
	//Значения состояний игрового поля (не учитывается местоположение игрока и врагов):
	//0 - ячейка пуста
	//1 - ячейка закрашена следом
	//2 - ячейка закрашена
	//3 - ячейка подготовлена к закрашиванию (но не обязательна она будет закрашена)
	int time; //время в миллисекундах
	int area; //Площадь закрашенного поля
	int newArea; //Новая площадь закрашенного поля
	int areaWrap; //Площадь куска, закрашенного еще перед началом уровня
	int r, g, b; //Цвет поля
};
//Данные о враге 
struct Foe {
	int x; //Координата по x в пикселях
	int y; //Координата по y в пикселях
	int posMatrixX; //Координата по x в матрице FieldGame.matrix
	int posMatrixY; //Координата по y в матрице FieldGame.matrix
	int w; //Ширина врага в пикселях
	int h; //Высота игрока в пикселях
	int direction; //Направление по диагонали (0 - влево вверх, 1 - вправо вверх, 2 - вправо вниз, 3 - влево вниз)
	int speed; //Скорость врага по диагонали в матрице

	int r, g, b; //Цвет врага
};
//Массив врагов
struct listFoes {
	Foe* foes; //массив врагов
	int length; //длина массива врагов
};

//Данные о площади, отрезанной перед началом уровня
struct Area {
	int xCell; //Координата по x в ячейках
	int yCell; //Координата по y в ячейках
	int widthCell; //Ширина поля в ячейках
	int heightCell; //Высота поля в ячейках
};
//Данные о уровне
struct Level {
	int numberLevel; //Номер уровня
	int numberFoes; //Количество врагов
	Area* areas; //Указатель на массив из закрашенных площадей
	int lengthAreas; //Длина массива с площадями
};
//Данные о уровнях
struct Levels {
	Level* masLevels; //Указатель на массив из из структур каждого уровня
	int length; // Длина массива
};
